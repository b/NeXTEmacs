Info file: gnus,    -*-Text-*-
produced by texinfo-format-buffer
from file: gnus.texinfo



This file documents GNUS, the GNU Emacs newsreader.

Copyright (C) 1989 Fujitsu Laboratories LTD.
Copyright (C) 1989 Masanobu UMEDA.

Permission is granted to make and distribute verbatim copies of this
manual provided the copyright notice and this permission notice are
preserved on all copies.

Permission is granted to copy and distribute modified versions of this
manual under the conditions for verbatim copying, provided also that the
sections entitled "Distribution" and "GNUS General Public License"
are included exactly as in the original, and provided that the entire
resulting derived work is distributed under the terms of a permission
notice identical to this one.

Permission is granted to copy and distribute translations of this manual
into another language, under the above conditions for modified versions,
except that the sections entitled "Distribution" and "GNUS General
Public License" may be included in a translation approved by the author
instead of in the original English.



File: gnus  Node: Marking Articles, Prev: Scrolling, Up: Reading Articles, Next: Digest Articles

Marking Articles
----------------

  GNUS uses three kinds of marks to indicate article status.

   * White space ` ' for newly arrived articles.
   * Dash `-' for articles marked as unread.
   * Any other characters for articles marked as read.

  The status is displayed at the beginning of each line of the Subject
buffer.  Commands for marking or removing these marks are as follows:

`d'
     Mark article as read, and then move to the next subject
     (`gnus-Subject-mark-as-read-forward').

`D'
     Mark article as read, and then move to the previous subject
     (`gnus-Subject-mark-as-read-backward').

`u'
     Mark article as unread, and then move to the next subject
     (`gnus-Subject-mark-as-unread-forward').

`U'
     Mark article as unread, and then move to the previous subject
     (`gnus-Subject-mark-as-unread-backward').

`M-u'
     Clear marks, and then move to the next subject
     (`gnus-Subject-clear-mark-forward').

`M-U'
     Clear marks, and then move to the previous subject
     (`gnus-Subject-clear-mark-backward').

`k'
     Mark articles with the same subject as the current article as read,
     and then select the next unread article
     (`gnus-Subject-kill-same-subject-and-select').

`C-k'
     Mark articles with the same subject as the current article as read
     (`gnus-Subject-kill-same-subject').

`c'
     Mark all articles as read, and then exit the current newsgroup
     (`gnus-Subject-catch-up-and-exit').

`M-x gnus-Subject-catch-up'
     Mark all articles as read.

  It is helpful to delete headers marked as read while reading a large
newsgroup.  The command `x' (`gnus-Subject-delete-marked-as-read')
deletes headers marked as read.  The command `X'
(`gnus-Subject-delete-marked-with') deletes headers which have a
specific mark.

`x'
     Delete headers marked as read
     (`gnus-Subject-delete-marked-as-read').

`X MARK RET'
     Delete headers marked with MARK
     (`gnus-Subject-delete-marked-with').


File: gnus  Node: Digest Articles, Prev: Marking Articles, Up: Reading Articles

Reading Digest Articles
-----------------------

  "Digest article" is a message containing many messages in "digest"
format.  Since a digest article contains many messages in one article,
it is a little bit difficult to read it on a per message basis.  The
following commands make it easier to read each message in a digest
article.

`C-c C-n'
     Scroll to the next digest message of the current article
     (`gnus-Subject-next-digest').

`C-c C-p'
     Scroll to the previous digest message of the current article
     (`gnus-Subject-prev-digest').

`C-d'
     Read the current digest article using Rmail
     (`gnus-Subject-rmail-digest').

  The commands `C-c C-n' and `C-c C-p' (`gnus-Subject-next-digest' and
`gnus-Subject-prev-digest') scroll a digest article to the next and
previous digested message, respectively.

  The command `C-d' (`gnus-Subject-rmail-digest') runs Rmail on a digest
article and makes it possible to read messages not in digest form using
Rmail Mode.  *Note Rmail: (emacs)Rmail, for more information on Rmail
Mode.  Use the hook `gnus-Select-article-hook' to run Rmail on digest
articles automatically.

  Digest articles in some newsgroups of USENET cannot be read using
Rmail.  In this case, a message `Article is not a digest' is displayed
in the echo area of Emacs.  This means that these articles are not
written in the proper digest format.  It is, however, possible to read
these incomplete digest articles by modifying the message headers or
bodies appropriately using the hook `gnus-Select-digest-hook'.  *Note
Hooks::, to modify incomplete digest articles.

  If the variable `gnus-digest-show-summary' is non-`nil', a summary of
the digest article is also displayed automatically when Rmail is
invoked.


File: gnus  Node: Searching Articles, Prev: Reading Articles, Up: Subject Commands, Next: Referencing Articles

Searching Articles
==================

`s'
     Do incremental search on the current article
     (`gnus-Subject-isearch-article').

`M-s REGEXP RET'
     Search for articles containing a match for REGEXP forward
     (`gnus-Subject-search-article-forward').  If REGEXP is empty, the
     last regexp used is used again.

`M-S REGEXP RET'
     Search for articles containing a match for REGEXP backward
     (`gnus-Subject-search-article-backward').  If REGEXP is empty, the
     last regexp used is used again.

`& FIELD RET REGEXP RET COMMAND RET'
     Execute COMMAND on articles containing a match for REGEXP in FIELD
     of the headers (`gnus-Subject-execute-command').  If FIELD is
     empty, the entire article is searched for.

  The command `s' (`gnus-Subject-isearch-article') does an incremental
search on the current article.  The commands `M-s' and `M-S'
(`gnus-Subject-search-article-forward' and
`gnus-Subject-search-article-backward') search for articles containing a
match for regexp.  The search starts from the current point of the
current article.

  The command `&' (`gnus-Subject-execute-command') interactively reads
the field name of article headers, regexp, and a valid command key
sequence.  It then searches for articles having a field that contains a
match for the regexp, and then executes the command specified by the key
sequence on them.


File: gnus  Node: Referencing Articles, Prev: Searching Articles, Up: Subject Commands, Next: Saving Articles

Referencing Articles
====================

`^'
     Refer to parent of the current article
     (`gnus-Subject-refer-parent-article').  With a prefix argument, go
     back to the child.

`M-r MESSAGE-ID RET'
     Refer to the article by using the MESSAGE-ID
     (`gnus-Subject-refer-article').  With an empty MESSAGE-ID, go back
     to the origin.

  The command `^' (`gnus-Subject-refer-parent-article') refers to parent
article of the current article.  The child article is remembered in
internal history, and it is possible to return to the child by giving a
prefix argument to the command.

  The commands `^' and `M-r' (`gnus-Subject-refer-parent-article' and
`gnus-Subject-refer-article') share the same internal history.  You can
thus go back to a child using the command `M-r' with an empty
Message-ID.

  Type `g' (`gnus-Subject-show-article') to go back to the origin from
the visited articles directly.

  *Note Article Commands::, to refer to articles by using Message-IDs
included in the messages.


File: gnus  Node: Saving Articles, Prev: Referencing Articles, Up: Subject Commands, Next: Sorting Headers

Saving Articles
===============

  GNUS provides four different formats for saving articles in: Rmail
format, Unix mailbox format, MH folder, and plain file.  If you set the
variable `gnus-article-default-saver' to your favorite article saver,
you can save an article using the command `o'
(`gnus-Subject-save-article') in your favorite format.  The default
saver is the function `gnus-Subject-save-in-rmail'.

`o'
     Save the current article using the default saver specified by the
     variable `gnus-article-default-saver'
     (`gnus-Subject-save-article').

`| COMMAND RET'
     Send contents of the current article to the COMMAND subprocess
     (`gnus-Subject-pipe-output').

`C-o'
`M-x gnus-Subject-save-in-mail'
     Save the current article in Unix mailbox format.

`M-x gnus-Subject-save-in-rmail'
     Save the current article in Rmail format.

`M-x gnus-Subject-save-in-folder'
     Save the current article in an MH folder.

`M-x gnus-Subject-save-in-file'
     Save the current article in a plain file.

  If the variable `gnus-save-all-headers' is non-`nil', all headers of
an article are saved.

  The variable `gnus-article-save-directory' specifies a directory to
which articles are saved to by the functions
`gnus-Subject-save-in-mail', `gnus-Subject-save-in-rmail', and
`gnus-Subject-save-in-file'.  It is initialized from the `SAVEDIR'
environment variable.  The default directory is `~/News'.

  The variable `gnus-article-save-name' specifies a function generating
default file name to which articles are saved.  The function must accept
NEWSGROUP and HEADERS as its arguments.  The default function
`gnus-article-save-name' generates a file name like `~/News/NEWS.GROUP'
if the variable `gnus-use-long-file-name' is `nil'.  If the variable is
non-`nil', a directory form of newsgroup like `~/News/NEWS/GROUP/NUMBER'
is generated instead.

  The variable `gnus-article-mh-folder' specifies an MH folder name to
which articles are saved by the function `gnus-Subject-save-in-folder'.
Use the variable `gnus-article-default-saver' to change the default
folder name according to the current newsgroup.

  *Note Variables::, for more information on customization.


File: gnus  Node: Sorting Headers, Prev: Saving Articles, Up: Subject Commands, Next: Followup and Reply

Sorting Headers
===============

  The headers listed in the Subject buffer can be sorted by number,
subject, date, or author of articles.  Sorting is stable, so it is
possible to combine them to sort the headers with multiple keys.  To
sort in reverse order, give a prefix argument to the commands.

`C-c C-s n'
`C-c C-s C-n'
     Sort the headers by number (`gnus-Subject-sort-by-number').

`C-c C-s s'
`C-c C-s C-s'
     Sort the headers by subject (`gnus-Subject-sort-by-subject').

`C-c C-s d'
`C-c C-s C-d'
     Sort the headers by date (`gnus-Subject-sort-by-date').

`C-c C-s a'
`C-c C-s C-a'
     Sort the headers by author (`gnus-Subject-sort-by-author').

  It is also possible to sort the headers automatically when a newsgroup
is selected using the hook `gnus-Select-group-hook' (*Note Hooks::).


File: gnus  Node: Followup and Reply, Prev: Sorting Headers, Up: Subject Commands, Next: Exiting Newsgroup

Followup and Reply
==================

`f'
     Followup to the current article (`gnus-Subject-post-reply').

`a'
     Compose a new article (`gnus-Subject-post-news').

`C'
     Cancel the current article you posted (`gnus-Subject-cancel').

  Type `a' (`gnus-Subject-post-news') to post a new article.  If the
variable `gnus-novice-user' is non-`nil', the newsgroup, subject, and
distribution are asked for interactively.  The command `f'
(`gnus-Subject-post-reply') fills these values in automatically from
those of the original article.

  The major mode for composing a new article is "News Mode" which is
borrowed from `rnewspost.el'.  Type `C-c C-y'
(`news-reply-yank-original') to include the original article.  Type `C-h
m' (`describe-mode') to get more help for News Mode.

`r'
     Reply to the author of the current article (`gnus-Subject-mail-reply').

`m'
     Compose a mail message in other window (`gnus-Subject-mail-other-window').

  Use the command `r' (`gnus-Subject-mail-reply') to reply to the author
of the article.  Type `C-c C-y' (`mail-yank-original') to include the
original article.  *Note Mail Mode: (emacs)Mail Mode, for more
information.


File: gnus  Node: Exiting Newsgroup, Prev: Followup and Reply, Up: Subject Commands, Next: Other Subject Commands

Exiting the Current Newsgroup
=============================

`q'
     Exit the current newsgroup, and return to Group Mode
     (`gnus-Subject-exit').

`Q'
     Exit the current newsgroup without recording unread articles
     information (`gnus-Subject-quit').

`c'
     Mark all articles as read, and then exit the current newsgroup
     (`gnus-Subject-catch-up-and-exit').

`G'
     Record unread articles information, and then reselect the current
     newsgroup (`gnus-Subject-reselect-current-group').

`M-x gnus-Subject-next-group'
     Record unread articles information, and then select the next
     newsgroup containing unread articles.

`M-x gnus-Subject-prev-group'
     Record unread articles information, and then select the previous
     newsgroup containing unread articles.

  The command `G' (`gnus-Subject-reselect-current-group') selects the
current newsgroup again after temporary exiting the newsgroup.  If no
articles remain unread, all articles in the newsgroup will be selected.
A prefix argument to the command means to select all articles in the
newsgroup.


File: gnus  Node: Other Subject Commands, Prev: Exiting Newsgroup, Up: Subject Commands

Miscellaneous Commands
======================

  Other miscellaneous commands are described here.

`M-k'
     Edit a local KILL file applied to the current newsgroup
     (`gnus-Subject-edit-local-kill').  *Note KILL File::, for more
     information.

`V'
     Print version number of this GNUS (`gnus-version').

`?'
     Describe Subject Mode commands briefly
     (`gnus-Subject-describe-briefly').

`C-c C-i'
     Read Info on Subject Mode (`gnus-Info-find-node').  *Note Texinfo
     Manual::, to prepare an Info file of GNUS.


File: gnus  Node: Article Commands, Prev: Subject Commands, Up: Top, Next: KILL File

Article Commands
****************

  In the Article buffer the following commands are available:

`SPC'
     Scroll text of the current window (`gnus-Article-next-page').

`DEL'
     Scroll text of the current window (`gnus-Article-prev-page').

`r'
     Refer to article specified by the Message-ID close to the point
     (`gnus-Article-refer-article').

`o'
     Return to the previous article from the referenced article
     (`gnus-Article-pop-article').

`h'
`s'
     Reconfigure Emacs windows to show the Subject buffer above the
     Article buffer and move the point to the Subject buffer
     (`gnus-Article-show-subjects').

`?'
     Describe Article Mode commands briefly
     (`gnus-Article-describe-briefly').

`C-c C-i'
     Read Info on Article Mode (`gnus-Info-find-node').  *Note Texinfo
     Manual::, to prepare an Info file of GNUS.

  The command `r' (`gnus-Article-refer-article') searches for the
Message-ID around the point, and refers to an article specified by it if
found.  Use the command `o' (`gnus-Article-pop-article') to return to
the previous article.  *Note Referencing Articles::, for referencing
parent articles easily.


File: gnus  Node: KILL File, Prev: Article Commands, Up: Top, Next: Customization

KILL File
*********

  The purpose of a KILL file and its usage are described here.

* Menu:

* What KILL Files Do::          An introduction to a KILL file.
* Making a KILL File::          How to make a KILL file.
* Editing KILL Files::          How to edit KILL files.
* Example of a KILL File::      An example of a KILL file.
* Advanced Kills::              Advanced features of KILL files.


File: gnus  Node: What KILL Files Do, Prev: KILL File, Up: KILL File, Next: Making a KILL File

What KILL Files Do
==================

  A "KILL" file contains lisp expressions to be applied to a newsgroup
selected to be read.  The purpose is to mark articles as read on the
basis of some set of regexps.

  There are two kinds of KILL files, global and local.  A global KILL
file is applied to every newsgroup, and a local KILL file to a specified
newsgroup.  Since a global KILL file is applied to every newsgroup, for
better performance use a local one.


File: gnus  Node: Making a KILL File, Prev: What KILL Files Do, Up: KILL File, Next: Editing KILL Files

Making a KILL File
==================

  A KILL file can contain any kind of Emacs lisp expressions expected to
be evaluated in the Subject buffer.  Writing lisp programs for this
purpose is not easy because the internal working of GNUS must be
well-known.  For this reason, GNUS provides a general function which
does this easily for non-lisp programmers.

     (gnus-kill FIELD REGEXP &optional COMMAND)

The `gnus-kill' function executes commands available in Subject Mode by
their key sequences.  `gnus-kill' should be called with FIELD, REGEXP,
and optional COMMAND.  FIELD is a string representing the header field
or an empty string.  If FIELD is an empty string, the entire article
body is searched for.  REGEXP is a string which is compared with FIELD
value.  COMMAND is a string representing a valid key sequence in Subject
Mode or a lisp expression.  COMMAND is default to
`(gnus-Subject-mark-as-read nil "X")'.  Make sure that COMMAND is
executed in the Subject buffer.

  For example, if you want to mark articles of which subjects contain
the string `AI' as read, a possible KILL file may look like:

     (gnus-kill "Subject" "AI")

  If you want to mark articles with `D' instead of `X', you can use the
following expression:

     (gnus-kill "Subject" "AI" "d")

In this example it is assumed that the command
`gnus-Subject-mark-as-read-forward' is assigned to `d' in Subject Mode.

  It is possible to delete unnecessary headers which are marked with `X'
in a KILL file by using the function `gnus-Subject-delete-marked-with'
as follows:

     (gnus-Subject-delete-marked-with "X")

  If the Subject buffer is empty after applying KILL files, GNUS will
exit the selected newsgroup normally.  If headers which are marked with
`D' are deleted in a KILL file, it is impossible to read articles which
are marked as read in the previous GNUS sessions.  Marks other than `D'
should be used for articles which should really be deleted.

  All sorts of searches in Subject Mode normally ignore the case of the
text they are searching through.  If you do not want to ingore the case,
set the variable `case-fold-search' to `nil'.


File: gnus  Node: Editing KILL Files, Prev: Making a KILL File, Up: KILL File, Next: Example of a KILL File

Editing KILL Files
==================

  The command `M-K' (`gnus-Group-edit-global-kill') in Group Mode pops
up an Emacs buffer for editing a global KILL file.  A global KILL file
is created under a directory specified by the variable
`gnus-article-save-directory' (default to `~/News'), and its file name
is specified by the variable `gnus-kill-file-name' (default to `KILL').

  The command `M-k' in Subject Mode and Group Mode
(`gnus-Subject-edit-local-kill' and `gnus-Group-edit-local-kill') pops
up an Emacs buffer for editing a local KILL file.  A local KILL file for
a newsgroup NEWS.GROUP is created as `NEWS.GROUP.KILL' under the
directory specified by the variable `gnus-article-save-directory' if the
variable `gnus-use-long-file-name' is non-`nil'.  Otherwise, if the
variable `gnus-use-long-file-name' is `nil', the file is created as
`NEWS/GROUP/KILL' under the same directory.

  The major mode of these buffers is "Edit KILL File Mode".  This mode
is specialized for editing Emacs lisp programs the same as Emacs-Lisp
Mode.  In addition to Emacs-Lisp Mode, the following commands are
available:

`C-c C-c'
     Save the KILL file and then return to the previous buffer
     (`gnus-Kill-file-exit').

`C-c C-i'
     Read Info on KILL file (`gnus-Info-find-node').  *Note Texinfo
     Manual::, to prepare an Info file of GNUS.


File: gnus  Node: Example of a KILL File, Prev: Editing KILL Files, Up: KILL File, Next: Advanced Kills

Example of a KILL File
======================

  The following is an example of a local KILL file for newsgroup
`control'.  This is currently being used by the author.

     ;; Apply to the newsgroup `control' if the NNTP server is flab.
     (if (string-equal gnus-nntp-server "flab")
         (progn
           (gnus-kill "Subject" "ihave flab\\|sendme")
           (gnus-kill "Subject" "cancel\\|newgroup\\|rmgroup" "d")
           (gnus-Subject-delete-marked-with "X")))


File: gnus  Node: Advanced Kills, Prev: Example of a KILL File, Up: KILL File

Advanced Kill Processing
========================

  Internally, applying kills means to run the hook
`gnus-Apply-kill-hook'.  It is called after the Subject buffer is
prepared for a selected newsgroup.  The default hook is the function
`gnus-Kill-file-apply' which loads a global KILL file and a local KILL
file in this order.  A different style of the kill processing can be
implemented by customizing this hook.

  For example, if you think a global KILL file is unnecessary, you can
use the following hook which applies only a local KILL file.  This
change can save the time for checking the existence of a global KILL
file.

     (setq gnus-Apply-kill-hook
           '(lambda ()
              ;; Apply a local KILL file.
              (load (gnus-Kill-file-name nil) t nil t)))

  On the contrary, the following example enables only a global KILL
file.

     (setq gnus-Apply-kill-hook
           '(lambda ()
              ;; Apply a global KILL file.
              (load (gnus-Kill-file-name t) t nil t)))

  Here is an advanced example that drastically saves the time for
applying KILL files.  This hook does the kill processing directly
without loading the KILL files.

     (setq gnus-Apply-kill-hook
           '(lambda ()
              ;; Apply to the newsgroup `control'
              ;; if the NNTP server is flab.
              (and (string-equal gnus-nntp-server "flab")
                   (string-equal gnus-newsgroup-name "control")
                   (progn
                     (gnus-kill "Subject" "ihave flab\\|sendme")
                     (gnus-kill "Subject" "cancel\\|newgroup\\|rmgroup" "d")
                     (gnus-Subject-delete-marked-with "X")))))


File: gnus  Node: Customization, Prev: KILL File, Up: Top, Next: Problems

Customizing GNUS
****************

  Appendix A describes the variables and hooks for simple customizations
and the variables for localizations.

* Menu:

* Variables::           Variables for customizing GNUS.

* NNTP Variables::      Variables for localizing NNTP environment.
* Spool Variables::     Variables for localizing news spool environment.
* Directory Variables:: Variables for localizing private directory environment.

* Hooks::               Function hooks for customizing GNUS.


File: gnus  Node: Variables, Prev: Customization, Up: Customization, Next: NNTP Variables

Common Variables
================

`gnus-nntp-server'

     Specifies the name of the host running the NNTP server.  The
     variable is initialized from the `NNTPSERVER' environment variable.
     If the server name is preceded by a colon such as `:Mail', the
     user's private directory `~/Mail' is used as a news spool.  *Note
     NNTP Server::, and *Note Private Directory::, for more information.

`gnus-nntp-service'

     Specifies a service name of NNTP, usually a string `"nntp"'.  In a
     few instances, it must be the number `119'.  To use a local news
     spool of your machine rather than NNTP, set the variable to `nil'.
     *Note NNTP Service::, and *Note Local News Spool::, for more
     information.

`gnus-your-domain'

     Specifies the domain which is the domain part of your mail address
     excluding the local host name of your machine.  The environment
     variable `DOMAINNAME' is used instead if defined.  If the function
     `system-name' returns the full Internet name, there is no need to
     define the domain.  *Note Domain and Organization: Domain, for more
     information.

`gnus-your-organization'

     Specifies the organization you belong to.  The environment variable
     `ORGANIZATION' is used instead if defined.  The organization must
     be defined unconditionally.  *Note Domain and Organization: Domain,
     for more information.

`gnus-use-generic-from'

     Non-`nil' means the local host name of your machine will not appear
     in the `From:' field of article headers.  If the variable is a
     string, it is used as your domain instead of the definition by the
     variable `gnus-your-domain' or the environment variable
     `DOMAINNAME'.  *Note GENERICFROM::, for more information.

`gnus-use-generic-path'

     Non-`nil' means the NNTP server name will not appear in the `Path:'
     field of article headers.  If the variable is a string, it is used
     in the `Path:' field as the NNTP server name instead of the
     definition by the variable `gnus-nntp-server'.  *Note
     GENERICPATH::, for more information.

`gnus-startup-file'

     Specifies a startup file of the Bnews system, usually `.newsrc'.
     If there is a file named `.newsrc-SERVER', it is used instead when
     talking to SERVER.  *Note Startup File::, for more information.

`gnus-signature-file'

     Specifies a signature file of the Bnews system, usually
     `.signature'.  If there is a file named `.signature-DISTRIBUTION',
     it is used instead when posting an article in DISTRIBUTION.  Set
     the variable to `nil' to prevent appending the signature file
     automatically.

`gnus-subject-lines-height'

     Specifies the height of the Subject Mode window.  It is possible to
     change the height according to that of an Emacs window as follows:

          (setq gnus-Subject-mode-hook
                '(lambda ()
                   (setq gnus-subject-lines-height
                         (/ (window-height) 5))))

`gnus-large-newsgroup'

     Specifies the number of the articles which indicates a large
     newsgroup.  If the number of articles in a newsgroup is greater
     than this value, the number of articles to be selected is asked
     for.  If the given value N is positive, the last N articles are
     selected.  If N is negative, the first N articles are selected.  An
     empty string means to select all articles.

`gnus-author-copy-file'

     Specifies a file name saving a copy of an article posted.  The
     variable is initialized from the `AUTHORCOPY' environment variable.
     The article is appended to the specified file in Unix mailbox
     format.

     If the first character of the value is ``|'', the contents of the
     article is piped out to a program specified by the rest of the
     value.  For example, articles can be saved in an MH folder by the
     following:

          (setq gnus-author-copy-file 
                "|/usr/local/lib/mh/rcvstore +Article")

`gnus-use-long-file-name'

     Non-`nil' means that a newsgroup name is used as a default file
     name to save articles to.  If it is `nil', the directory form of a
     newsgroup name is used instead.

`gnus-article-save-name'

     Specifies a function generating a file name to save articles to.
     The function is called with two arguments, NEWSGROUP and HEADERS.
     NEWSGROUP is a string representing the current newsgroup name.
     HEADERS is a vector containing headers of the current article.
     Macros and functions accessing contents of the HEADERS are defined
     as `nntp-header-FIELD' and `gnus-header-FIELD', respectively.

     The default function `gnus-article-save-name' generates a file name
     like `~/News/NEWS.GROUP' if the variable `gnus-use-long-file-name'
     is `nil'.  If the variable is non-`nil', the directory form of
     newsgroup like `~/News/NEWS/GROUP/NUMBER' is generated instead.

`gnus-article-default-saver'

     Specifies a function to save articles in your favorite format using
     the command `gnus-Subject-save-article'.  The function must be
     interactively funcallable.  In other words, it must be an Emacs
     command.  The functions currently provided are as follows:

     `gnus-Subject-save-in-mail'
          Save articles in Unix mailbox format.

     `gnus-Subject-save-in-rmail'
          Save articles in Rmail format.

     `gnus-Subject-save-in-folder'
          Save articles in an MH folder.

     `gnus-Subject-save-in-file'
          Save articles in a plain file.

`gnus-article-save-directory'

     Specifies a directory name to save articles to using the commands
     `gnus-Subject-save-in-rmail', `gnus-Subject-save-in-mail' and
     `gnus-Subject-save-in-file'.  The variable is initialized from the
     `SAVEDIR' environment variable.  Its default value is `~/News'.

`gnus-article-mh-folder'

     Specifies an MH folder name saving articles by using the command
     `gnus-Subject-save-in-folder'.  It is possible to change the
     default folder according to the currently selected newsgroup as
     follows:

          (setq gnus-article-default-saver
                '(lambda ()
                   (interactive)
                   (let ((gnus-article-mh-folder
                            (concat "+" gnus-newsgroup-name)))
                     (call-interactively
                       'gnus-Subject-save-in-folder))))")

`gnus-kill-file-name'

     Specifies a file name of KILL file (*Note KILL File::).  Its
     default value is `KILL'.

`gnus-default-distribution'

     Specifies a distribution inserted automatically when no distribution is
     specified.

`gnus-novice-user'

     Non-`nil' means you are a novice to USENET.  If it is non-`nil',
     you will be prompted for newsgroup, subject, and distribution when
     posting a new article.

`gnus-user-login-name'

     Specifies your login name.  It is initialized from the `USER' and
     the `LOGNAME' environment variables.

`gnus-user-full-name'

     Specifies your full name.  It is initialized from the `NAME'
     environment variable.

`gnus-show-all-headers'

     Non-`nil' means all headers of an article are shown.

`gnus-save-all-headers'

     Non-`nil' means all headers of an article are saved in a file.

`gnus-auto-select-first'

     Non-`nil' means the first unread article is selected automatically
     when a newsgroup is selected.  If you'd like to prevent automatic
     selection of the first unread article in some newsgroups, set the
     variable to `nil' in the hook `gnus-Select-group-hook' or
     `gnus-Apply-kill-hook' (*Note Hooks::).

`gnus-auto-select-next'

     Non-`nil' means the next newsgroup is selected automatically at the
     end of the newsgroup.  If the value is `t' and the next newsgroup
     is empty (no unread articles), GNUS will exit Subject Mode and go
     back to Group Mode.  If the value is neither `nil' nor `t', GNUS
     won't exit Subject Mode but will select the following unread
     newsgroup.  If the value is `quietly', the next unread newsgroup
     will be selected without any confirmations.

`gnus-auto-select-same'

     Non-`nil' means an article with the same subject as the current
     article is selected automatically like `rn -S'.

`gnus-break-pages'

     Non-`nil' means an article is broken into pages at page delimiters.
     The page delimiter is specified by the variable
     `gnus-page-delimiter'.  A message shown at the end of pages is
     specified by the variable `gnus-more-message'.  This may not work
     with some versions of GNU Emacs earlier than version 18.50.

`gnus-page-delimiter'

     Specifies regexp describing line-beginnings that separate pages of
     articles.  Its default value is `"^\^L"'.

`gnus-more-message'

     Specifies a message shown at the end of each page in page break mode.
     The length of the message string must be shorter than or equal to that
     of the page delimiter if GNU Emacs is earlier than version 18.52.

`gnus-digest-show-summary'

     Non-`nil' means that a summary of digest messages is shown when
     reading a digest article using the command
     `gnus-Subject-rmail-digest'.

`gnus-optional-headers'

     Specifies a function which generates an optional string displayed
     in the Subject buffer.  The function is called with an article
     HEADERS, and must return a string excluding `[' and `]'.  HEADERS
     is a vector containing headers of the current article.  Macros and
     functions accessing contents of the HEADERS are defined as
     `nntp-header-FIELD' and `gnus-header-FIELD', respectively.

     GNUS provides two functions as follows:

     `gnus-optional-lines-and-from'
          Return a string like "NNN:AUTHOR", where NNN is the number of
          lines in an article and AUTHOR is the name of the author.

     `gnus-optional-lines'
          Return a string like "NNN", where NNN is the number of lines
          in an article.

     *Note Hooks::, to change optional headers according to selected
     newsgroups.

`gnus-keep-subject-centered'

     Non-`nil' means that the cursor is always kept centered in the
     Subject Mode window.

`gnus-Info-directory'

     Specifies a directory where the GNUS Info file is placed.  It is
     not necessary to change this variable unless you install an Info
     file in a directory different from the variable `Info-directory'.
     *Note Texinfo Manual::, for more information.



File: gnus  Node: NNTP Variables, Prev: Variables, Up: Customization, Next: Spool Variables

NNTP Specific Variables
=======================

`nntp-buggy-select'

     Non-`nil' means the select routine of your operating system is
     buggy.  GNUS may hang up while waiting for NNTP server responses.
     The problem may be solved by setting the variable to `t'.  *Note
     NNTP Problems::, for more information.

`nntp-maximum-request'

     Specifies the maximum number of requests to be sent to the NNTP
     server at one time.  GNUS may hang up while retrieving headers of a
     large newsgroup because sending many requests to the NNTP server
     without reading replies to them causes deadlock.  In this case, set
     the variable to a lower number.  *Note NNTP Problems::, for more
     information.

`nntp-large-newsgroup'

     Specifies the number of articles which indicates a large newsgroup.
     If the number of articles is greater than the value, verbose
     messages will be shown to indicate the current status.

`tcp-program-name'

     Specifies a program which establishes communications between Emacs and
     the NNTP server.  Its default value is `tcp' which is distributed as
     `tcp.c' with other files of GNUS (*Note Files of GNUS::).  If your
     Emacs has the function `open-network-stream', there is no need to
     define this variable.



File: gnus  Node: Spool Variables, Prev: NNTP Variables, Up: Customization, Next: Directory Variables

Local News Spool Specific Variables
===================================

`nnspool-inews-program'

     Specifies a program to post news.  This is default to the variable
     `news-inews-program' which is default to `inews'.

`nnspool-inews-switches'

     Specifies switches for the function `nntp-request-post' to pass to
     the command `inews' for posting news.  Its default value is `"-h"'.

`nnspool-spool-directory'

     Specifies a directory of a local news spool.  This is default to the
     variable `news-path' which is default to `/usr/spool/news'.

`nnspool-active-file'

     Specifies an active file of the Bnews system for a local news
     spool.  Its default value is `/usr/lib/news/active'.

`nnspool-history-file'

     Specifies a history file of the Bnews system for a local news
     spool.  Its default value is `/usr/lib/news/history'.  Some
     machines may not have this file.  In this case, commands to refer
     to articles by using Message-IDs will not work at all (*Note
     Referencing Articles::).



File: gnus  Node: Directory Variables, Prev: Spool Variables, Up: Customization, Next: Hooks

Private Directory Specific Variables
====================================

`mhspool-list-directory-switches'

     Specifies switches for the function `nntp-request-list' to pass to
     the command `ls' for getting file lists in a private directory.
     There should be one entry for each line.  Its default value is
     `"-R"'.  Some machines may require the `"-R1"' switch.



File: gnus  Node: Hooks, Prev: Directory Variables, Up: Customization

Function Hooks
==============

`gnus-Group-mode-hook'

     Called with no arguments after initializing Group Mode if its value
     is non-`nil'.  This hook is intended to customize Group Mode only
     once.  It is possible to define or change the NNTP server as you
     like it in this hook since the hook is called before GNUS is
     connected to an NNTP server.

`gnus-Subject-mode-hook'

     Called with no arguments after initializing Subject Mode if its
     value is non-`nil'.  This hook is intended to customize Subject
     Mode only once.  All sorts of searches in Subject Mode normally
     ignore the case of the text they are searching through.  If you do
     not want to ingore the case, set the variable `case-fold-search' to
     `nil' in this hook.

     The following example shows how to assign the functions
     `gnus-Subject-next-group' and `gnus-Subject-prev-group' to keys in
     Subject Mode.

          (setq gnus-Subject-mode-hook
                '(lambda ()
                   (local-set-key "\C-cn" 'gnus-Subject-next-group)
                   (local-set-key "\C-cp" 'gnus-Subject-prev-group)))

`gnus-Article-mode-hook'

     Called with no arguments after initializing Article Mode if its
     value is non-`nil'.  This hook is intended to customize Article
     Mode only once.

`gnus-Kill-file-mode-hook'

     Called with no arguments after initializing Edit KILL File Mode if its
     value is non-`nil'.

`gnus-Startup-hook'

     Called with no arguments after an NNTP server is successfully
     connected to if its value is non-`nil'.  It is possible to change
     the behavior of GNUS according to the server.

`gnus-Group-prepare-hook'

     Called with no arguments after a list of newsgroups is prepared in the
     Newsgroup buffer.  This hook is used for moving the point to the first
     unread (non empty) newsgroup by default.  This hook can also be used for
     modifying the buffer.

     The following example is the default hook definition:

          (setq gnus-Group-prepare-hook
                (function
                 (lambda ()
                   ;; Move the point to the first unread newsgroup.
                   (goto-char (point-min))
                   (re-search-forward "^[ \t]+[1-9][0-9]*:" nil t))))

`gnus-Subject-prepare-hook'

     Called with no arguments after list of subjects is prepared in the
     Subject buffer.  This hook is intended to modify the buffer.

`gnus-Article-prepare-hook'

     Called with no arguments after an article is prepared in the Article
     buffer.  This hook is intended to modify the buffer.  For example, kanji
     code conversion or un-ROT13-ing can be done in this hook.

`gnus-Select-group-hook'

     Called with no arguments when a newsgroup is selected.  This hook is
     intended to change the behavior of GNUS according to the selected
     newsgroup.

     The following is an example of sorting the headers listed in the
     Subject buffer by date and then by subject.  Preceding `Re:' of
     subjects is ignored while comparing subjects.

          (setq gnus-Select-group-hook
                '(lambda ()
                   ;; First of all, sort by date.
                   (gnus-sort-headers
                    '(lambda (a b)
                       (gnus-date-lessp (gnus-header-date a)
                                        (gnus-header-date b))))
                   ;; Then sort by subject ignoring `Re:'.
                   (gnus-sort-headers
                    '(lambda (a b)
                       (string-lessp 
                        (gnus-simplify-subject
                         (gnus-header-subject a) 're-only)
                        (gnus-simplify-subject
                         (gnus-header-subject b) 're-only)
                        )))))

     The following is an example of simplifying subjects like the
     `gnus-Subject-next-same-subject' command does:

          (setq gnus-Select-group-hook
                '(lambda ()
                   (mapcar (function
                            (lambda (header)
                              (nntp-set-header-subject
                               header
                               (gnus-simplify-subject
                                (gnus-header-subject header) 're-only))))
                           gnus-newsgroup-headers)))

     In some newsgroups author names are meaningless.  It is possible to
     prevent listing author names in the Subject buffer as follows:

          (setq gnus-Select-group-hook
                '(lambda ()
                   (cond ((string-equal "comp.sources.unix"
                                        gnus-newsgroup-name)
                          (setq gnus-optional-headers
                                (function gnus-optional-lines)))
                         (t
                          (setq gnus-optional-headers
                                (function
                                   gnus-optional-lines-and-from))))))

`gnus-Select-article-hook'

     Called with no arguments when an article is selected if its value
     is non-`nil'.

     It is possible to run Rmail on a digest article automatically as
     follows:

          (setq gnus-Select-article-hook
                '(lambda ()
                   (cond ((string-equal "comp.sys.sun"
                                        gnus-newsgroup-name)
                          (gnus-Subject-rmail-digest))
                         ((and (string-equal "comp.text"
                                             gnus-newsgroup-name)
                               (string-match "^TeXhax Digest"
                                             (gnus-header-subject
                                                gnus-current-headers)))
                          (gnus-Subject-rmail-digest)
                          ))))

`gnus-Select-digest-hook'

     Called with no arguments when reading digest messages using Rmail
     if its value is non-`nil'.  This hook is intended to modify an
     article so that Rmail can work with it.  *Note Digest Articles::,
     for more information on digest articles.

     The following example is the default hook definition to modify
     incomplete digest articles:

          (setq gnus-Select-digest-hook
                '(lambda ()
                   ;; Reply-To: is required by
                   ;; `undigestify-rmail-message'.
                   (or (mail-position-on-field "Reply-to" t)
                       (progn
                         (mail-position-on-field "Reply-to")
                         (insert (gnus-fetch-field "From"))))))

`gnus-Rmail-digest-hook'

     Called with no arguments when reading digest messages using Rmail
     if its value is non-`nil'.  This hook is intended to customize
     Rmail Mode for reading digest articles.

`gnus-Apply-kill-hook'

     Called with no arguments when a newsgroup is selected and the
     Subject buffer is prepared if its value is non-`nil'.  This hook is
     intended to apply KILL files to the selected newsgroup.  It is set
     to the function `gnus-Kill-file-apply' by default.

     Since a general KILL file is too heavy to use only for a few
     newsgroups, a lighter hook function is recommended.  For example,
     if you'd like to apply kills to articles which contain the string
     `rmgroup' in subject in newsgroup `control', you can use the
     following hook:

          (setq gnus-Apply-kill-hook
                '(lambda ()
                   (cond ((string-match "control" gnus-newsgroup-name)
                          (gnus-kill "Subject" "rmgroup" "d")))))

     *Note KILL File::, for more information on KILL files.

`gnus-Mark-article-hook'

     Called with no arguments when an article is selected for the first
     time if its value is non-`nil'.  The hook is intended to mark an
     article as read (or unread) automatically when it is selected.

     The following example is the default definition of the hook:

          (setq gnus-Mark-article-hook
                '(lambda ()
                   ;; Mark the selected article as read.
                   (or (memq gnus-current-article gnus-newsgroup-marked)
                       (gnus-Subject-mark-as-read gnus-current-article))
                   ;; Put "+" on the current subject.
                   (gnus-Subject-set-current-mark "+")
                   ))

     It is possible to mark as unread (`-') instead when an article is
     selected as follows:

          (setq gnus-Mark-article-hook
                '(lambda ()
                   ;; Mark the selected article as unread.
                   (gnus-Subject-mark-as-unread gnus-current-article)
                   ;; Put "+" on the current subject.
                   (gnus-Subject-set-current-mark "+")
                   ))

`gnus-Inews-article-hook'

     Called with no arguments before posting an article if its value is
     non-`nil'.  This hook is called just before sending an article to
     the NNTP server or calling the `inews' program, while the hook
     `news-inews-hook' is called before preparing article headers.  This
     hook is intended to run special encoding programs such as kanji
     code conversion on the article.

`gnus-Exit-group-hook'

     Called with no arguments when exiting the current newsgroup if its
     value is non-`nil'.  If your machine is so slow that exiting from
     Subject Mode takes a long time, you can inhibit marking articles as
     read by using cross-reference information in the `Xref:' field by
     setting the variable `gnus-newsgroup-headers' to `nil' in this
     hook.

`gnus-Exit-gnus-hook'

     Called with no arguments when exiting or suspending GNUS if its
     value is non-`nil'.  If you want to clear out Emacs buffers which
     were created by GNUS and remain afterwards, you can use this hook.

     The following example shows how to kill a buffer which was used for
     posting news.

          (setq gnus-Exit-gnus-hook
                '(lambda ()
                   ;; Kill a buffer used for posting news.
                   (and (get-buffer "*post-news*")
                        (kill-buffer "*post-news*"))))

`gnus-Save-newsrc-hook'

     Called with no arguments before saving the startup file `.newsrc'
     if its value is non-`nil'.  This hook is intended to change the way
     of backing up the startup file.

`nntp-server-hook'

     Called with no arguments when the connection between Emacs and the
     NNTP server is established if its value is non-`nil'.  This hook is
     intended to change the kanji code of a buffer associated with the
     stream.  Use the variable `nntp-server-name' to refer to the name
     of the NNTP server in this hook.  *Note Kanji Handling::, for more
     information.



File: gnus  Node: Problems, Prev: Customization, Up: Top, Next: Reporting Bugs

Troubleshooting
***************

  Some common problems and their solutions are described.  If you have
any other problems which are not described here and cannot solve them by
yourself, *Note Reporting Bugs::.

* Menu:

* NNTP Problems::       Problems with NNTP.
* Kanji Handling::      Problems with kanji handling.


File: gnus  Node: NNTP Problems, Prev: Problems, Up: Problems, Next: Kanji Handling

NNTP Problems
=============

Infinite Loop Caused by Buggy Select Routine
--------------------------------------------

  Emacs may hang up while waiting for NNTP server responses.  This may
be caused by a buggy select routine of your operating system.  If so,
the problem may be solved by using source codes of `nntp.el' instead of
byte-compiled codes.  If you still have problems with it, set the
variable `nntp-buggy-select' to `t'.


Deadlock Caused by Packet Overflow
----------------------------------

  Emacs may hang up while retrieving headers of a large newsgroup.  The
reason is that too many requests have been sent to the NNTP server
without reading replies to them.  This causes a deadlock of Emacs and
the server.  In this case, the number of requests sent to the server at
one time must be reduced.  Set the variable `nntp-maximum-request' to a
lower value than the default.  The optimal value depends on your
computing environment.


File: gnus  Node: Kanji Handling, Prev: NNTP Problems, Up: Problems

Kanji Handling
==============

Kanji Handling In NEmacs
------------------------

  If the kanji code of articles stored in the NNTP server is different
from your standard file kanji code, the correct kanji code of the buffer
associated with the NNTP stream must be specified using the hook
`nntp-server-hook' as follows:

     (setq nntp-server-hook
           '(lambda ()
              ;; Server's Kanji code is EUC (NEmacs hack).
              (make-local-variable 'kanji-fileio-code)
              (setq kanji-fileio-code 0)))

  The variable `nntp-server-name' is a buffer local variable holding a
host name running an NNTP server.  Use this variable to change the kanji
code according to the server.  The following example shows how to change
the kanji code using this variable.

     (setq nntp-server-hook
           '(lambda ()
              (make-local-variable 'kanji-fileio-code)
              (cond ((string-equal nntp-server-name "foo")
                     (setq kanji-fileio-code 0)) ;EUC
                    ((string-equal nntp-server-name "bar")
                     (setq kanji-fileio-code 1)) ;Shift-JIS
                    (t
                     (setq kanji-fileio-code 2)) ;JIS
                    )))


Kanji Handling In SX/A Emacs
----------------------------

  If the kanji code of articles stored in the NNTP server is not EUC, it
must be converted to EUC in an Emacs buffer after being read into the
buffer.  The kanji code of articles being posted must be also converted
to the server specific kanji code in an Emacs buffer before actually
being sent to the server.  The following examples show how to do these
using hooks:

     (setq gnus-Article-prepare-hook
           '(lambda ()
              (call-process-region (point-min) (point-max)
                                   "nkf" t t nil "-e" ;-e stands for EUC.
                                   )))
     (setq gnus-Inews-article-hook
           '(lambda ()
              (call-process-region (point-min) (point-max)
                                   "nkf" t t nil "-j" ;-j stands for JIS.
                                   )))

In this example, `nkf' (Network Kanji Filter) is used as a kanji code
converter, and the kanji code of the NNTP server is JIS.


File: gnus  Node: Reporting Bugs, Prev: Problems, Up: Top, Next: Key Index

Reporting Bugs
**************

Mailing Lists and USENET Newsgroup
==================================

  There are two mailing lists and one USENET newsgroup for discussing
GNUS related topics.  These are intended for exchanging useful
information about GNUS, such as bug reports, useful hooks, and
extensions of GNUS.  If you have any questions or problems, feel free to
ask about them.  Suggestions are also welcome.

`gnu.emacs.gnus'

     This is a USENET newsgroup under the gnu.all hierarchy which is
     concerned with the GNU Project of the Free Software Foundation.

`info-gnus-english@tut.cis.ohio-state.edu'

     This is an Internet mailing list which is gated bi-directionally
     with the gnu.emacs.gnus newsgroup.  English is the official
     language of the list.  Please send subscription requests to:

          info-gnus-english-request@tut.cis.ohio-state.edu

`info-gnus@flab.Fujitsu.JUNET'

     This is a JUNET mailing list.  Messages of info-gnus-english and
     gnu.emacs.gnus are forwarded to this list.  English and Japanese
     are the official languages of the list.  Please send subscription
     requests to:

          info-gnus-request@flab.Fujitsu.JUNET

  The major difference between info-gnus-english/gnu.emacs.gnus and
info-gnus is the official language.  There is no need to subscribe to
info-gnus if you cannot read messages written in Japanese since most
discussions and important announcements will be sent to
info-gnus-english.


How to Report a Bug
===================

  If you find a bug, it is important to report it and to report it in a
way which is useful.  If it is a bug of a lisp program, what is the most
useful is an exact backtrace information of the lisp program with the
version number of GNUS that you are using.

  To make the backtrace information, you must set the Emacs variable
`debug-on-error' to `t' before the error happens.  A backtrace obtained
from a byte-compiled lisp program is not usually understandable.  To
make a human readable backtrace, load the source program which is not
byte-compiled yet and then produce the error.

  *Note Reporting Bugs: (emacs)Bugs, for more information.


